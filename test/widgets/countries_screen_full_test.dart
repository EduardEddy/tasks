import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:tasks/features/countries/presentation/screens/countries_screen.dart';
import '../helpers/countries_test_helper.dart';

void main() {
  group('CountriesScreen full Tests', () {
    testWidgets('deber√≠a mostrar lista de pa√≠ses cuando hay datos',
        (WidgetTester tester) async {
      final mockCountries = CountriesTestHelper.getMockCountries();

      await tester.pumpWidget(
        ProviderScope(
          overrides:
              CountriesTestHelper.getMockCountriesOverride(mockCountries),
          child: const MaterialApp(
            home: CountriesScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      expect(find.text('Pa√≠ses del Mundo'), findsOneWidget);
      expect(find.text('Espa√±a'), findsOneWidget);
      expect(find.text('M√©xico'), findsOneWidget);
      expect(find.text('Jap√≥n'), findsOneWidget);
      expect(find.text('Capital: Madrid'), findsOneWidget);
      expect(find.text('Capital: Ciudad de M√©xico'), findsOneWidget);
      expect(find.text('Capital: Tokio'), findsOneWidget);
      expect(find.text('üá™üá∏'), findsOneWidget);
      expect(find.text('üá≤üáΩ'), findsOneWidget);
      expect(find.text('üáØüáµ'), findsOneWidget);
    });

    testWidgets('deber√≠a mostrar estado vac√≠o cuando no hay pa√≠ses',
        (WidgetTester tester) async {
      final emptyCountries = CountriesTestHelper.getEmptyCountries();

      await tester.pumpWidget(
        ProviderScope(
          overrides:
              CountriesTestHelper.getMockCountriesOverride(emptyCountries),
          child: const MaterialApp(
            home: CountriesScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      expect(find.text('No se encontraron pa√≠ses'), findsOneWidget);
      expect(find.text('Intenta refrescar la lista para cargar los datos'),
          findsOneWidget);
      expect(find.byIcon(Icons.public_off_outlined), findsOneWidget);
    });

    testWidgets('deber√≠a mostrar estado de error cuando falla la carga',
        (WidgetTester tester) async {
      await tester.pumpWidget(
        ProviderScope(
          overrides: CountriesTestHelper.getErrorCountriesOverride(
              'Error de conexi√≥n'),
          child: const MaterialApp(
            home: CountriesScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      expect(find.text('Oops! Algo sali√≥ mal'), findsOneWidget);
      expect(find.text('Exception: Error de conexi√≥n'), findsOneWidget);
      expect(find.text('Reintentar'), findsOneWidget);
    });

    testWidgets('deber√≠a mostrar pa√≠ses sin emoji con iniciales',
        (WidgetTester tester) async {
      final countriesWithoutEmoji =
          CountriesTestHelper.getCountryWithoutEmoji();

      await tester.pumpWidget(
        ProviderScope(
          overrides: CountriesTestHelper.getMockCountriesOverride(
              countriesWithoutEmoji),
          child: const MaterialApp(
            home: CountriesScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      expect(find.text('Estados Unidos'), findsOneWidget);
      expect(find.text('ES'), findsOneWidget); // Iniciales de "Estados Unidos"
    });

    testWidgets('deber√≠a mostrar estad√≠sticas cuando hay pa√≠ses',
        (WidgetTester tester) async {
      final mockCountries = CountriesTestHelper.getMockCountries();

      await tester.pumpWidget(
        ProviderScope(
          overrides:
              CountriesTestHelper.getMockCountriesOverride(mockCountries),
          child: const MaterialApp(
            home: CountriesScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      expect(find.text('Pa√≠ses Cargados'), findsOneWidget);
      expect(find.text('Explora culturas de todo el mundo'), findsOneWidget);
      expect(find.byIcon(Icons.explore), findsOneWidget);
    });

    testWidgets('deber√≠a permitir tap en un pa√≠s', (WidgetTester tester) async {
      final mockCountries = CountriesTestHelper.getMockCountries();

      await tester.pumpWidget(
        ProviderScope(
          overrides:
              CountriesTestHelper.getMockCountriesOverride(mockCountries),
          child: const MaterialApp(
            home: CountriesScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      await tester.tap(find.text('Espa√±a'));
      await tester.pumpAndSettle();

      expect(find.text('Tocaste: Espa√±a'), findsOneWidget);
    });

    testWidgets('deber√≠a mostrar informaci√≥n de capital y continente',
        (WidgetTester tester) async {
      final mockCountries = CountriesTestHelper.getMockCountries();

      await tester.pumpWidget(
        ProviderScope(
          overrides:
              CountriesTestHelper.getMockCountriesOverride(mockCountries),
          child: const MaterialApp(
            home: CountriesScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      expect(find.text('Capital: Madrid'), findsOneWidget);
      expect(find.text('Continente: Europa'), findsOneWidget);
      expect(find.text('Capital: Ciudad de M√©xico'), findsOneWidget);
      expect(find.text('Continente: Am√©rica del Norte'), findsOneWidget);
      expect(find.text('Capital: Tokio'), findsOneWidget);
      expect(find.text('Continente: Asia'), findsOneWidget);
    });

    testWidgets('deber√≠a mostrar emojis de pa√≠ses cuando est√°n disponibles',
        (WidgetTester tester) async {
      final mockCountries = CountriesTestHelper.getMockCountries();

      await tester.pumpWidget(
        ProviderScope(
          overrides:
              CountriesTestHelper.getMockCountriesOverride(mockCountries),
          child: const MaterialApp(
            home: CountriesScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      expect(find.text('üá™üá∏'), findsOneWidget);
      expect(find.text('üá≤üáΩ'), findsOneWidget);
      expect(find.text('üáØüáµ'), findsOneWidget);
    });

    testWidgets('deber√≠a mostrar m√∫ltiples pa√≠ses en la lista',
        (WidgetTester tester) async {
      final mockCountries = CountriesTestHelper.getMockCountries();

      await tester.pumpWidget(
        ProviderScope(
          overrides:
              CountriesTestHelper.getMockCountriesOverride(mockCountries),
          child: const MaterialApp(
            home: CountriesScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      expect(find.text('Espa√±a'), findsOneWidget);
      expect(find.text('M√©xico'), findsOneWidget);
      expect(find.text('Jap√≥n'), findsOneWidget);

      expect(find.byType(ListTile), findsNWidgets(3));
    });

    testWidgets('deber√≠a mostrar iconos de informaci√≥n en cada pa√≠s',
        (WidgetTester tester) async {
      final mockCountries = CountriesTestHelper.getMockCountries();

      await tester.pumpWidget(
        ProviderScope(
          overrides:
              CountriesTestHelper.getMockCountriesOverride(mockCountries),
          child: const MaterialApp(
            home: CountriesScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      expect(find.byIcon(Icons.location_city_outlined), findsNWidgets(3));
      expect(find.byIcon(Icons.public_outlined), findsNWidgets(3));
    });
  });
}
